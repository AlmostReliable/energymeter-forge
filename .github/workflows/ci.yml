name: CI

on: [push, pull_request, workflow_dispatch]

env:
  NODE_VERSION: 16.8.0
  PNPM_VERSION: 6.15.1
  JAVA_VERSION: 11

jobs:
  check:
    name: Lint & Build
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.0.3

      - name: Setup NodeJS ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v2.2.0
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm Cache
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-node${{ env.NODE_VERSION }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2.0.1
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: true

      - name: Check Prettier Format
        run: pnpx pretty-quick --check --verbose

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'adopt'

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonarqube --info

      - name: Build
        run: ./gradlew build --no-daemon

      - name: Checks
        run: ./gradlew check --no-daemon

      - name: Test
        run: ./gradlew test --no-daemon

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: check
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Clone Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.0.3

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'adopt'

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build
        run: ./gradlew build --no-daemon

      - name: Checks
        run: ./gradlew check --no-daemon

      - name: Test
        run: ./gradlew test --no-daemon

      - name: Assemble
        run: ./gradlew jar --no-daemon

      - name: Find the jar
        run: echo "JAR_FILE=$(find build/libs/energymeter-*-*.jar)" >> $GITHUB_ENV

      - name: Extract Minecraft and Mod Version
        run: echo ${JAR_FILE%.*} | awk -F- '{ print "MINECRAFT_VERSION=" $2; print "MOD_VERSION=" $3; }' >> $GITHUB_ENV

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: EnergyMeter-${{ env.MINECRAFT_VERSION }}-${{ env.MOD_VERSION }}.jar
          path: ${{ env.JAR_FILE }}

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ env.JAR_FILE }}

      - name: Upload to CurseForge
        run: ./gradlew curseforge
        env:
          CF_API_KEY: ${{ secrets.CF_API_KEY }}
